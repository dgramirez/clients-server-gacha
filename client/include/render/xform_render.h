#ifndef CSG_CLIENT_INCLUDE_RENDER_XFORM_RENDER_H
#define CSG_CLIENT_INCLUDE_RENDER_XFORM_RENDER_H

#include "types/render.h"
#include "types/system.h"

typedef enum {
	E_REND_SUCCESS = 0,

	E_REND_FAIL_NULL_API_EXPECT_FRONT_BUFFER = 0x1000,
	E_REND_FAIL_INVALID_API_SIZE_EXPECT_SIZE_OF_BACK_BUFFER,
	E_REND_FAIL_NULL_PARAM_RENDER,
	E_REND_FAIL_NULL_RENDER_DATA_FN_MEM,
	E_REND_FAIL_NULL_FN_MEM_MEMSET,
	E_REND_FAIL_NULL_RENDER_DATA_BACK_BUFFER,
	E_REND_FAIL_INVALID_BACK_BUFFER_SIZE,
	E_REND_FAIL_INVALID_BACK_BUFFER_COL_64,
	E_REND_FAIL_INVALID_BACK_BUFFER_COL_128,
	E_REND_FAIL_GET_STD_OUTPUT_HANDLE,
	E_REND_FAIL_GET_CONSOLE_CURSOR_INFO,
	E_REND_FAIL_SET_CONSOLE_CURSOR_INFO,
	E_REND_FAIL_GET_CONSOLE_SCREEN_BUFFER_INFOEX,
	E_REND_FAIL_SET_CONSOLE_SCREEN_BUFFER_INFOEX,
	E_REND_FAIL_SET_CONSOLE_SCREEN_BUFFER_SIZE,
	E_REND_FAIL_GET_CONSOLE_SCREEN_BUFFER_INFO_PRIOR_WRITE,
	E_REND_FAIL_SET_CONSOLE_CURSOR_POSITION,
	E_REND_FAIL_WRITE_CONSOLE,
	E_REND_WARN_GET_CONSOLE_SCREEN_BUFFER_INFO_AFTER_WRITE,
	E_REND_WARN_FILL_CONSOLE_OUTPUT_CHARACTER,
	E_REND_WARN_FILL_CONSOLE_OUTPUT_ATTRIBUTE,
} ERR_RENDER;

typedef struct {
	P_FnMemory pFnMem;
	RenderBuffer rendData;

	void *hApi;
	size_t cbApi;
} XFormRender, *P_XFormRender;

typedef int (*FnRenderInit)(P_XFormRender, P_FnMemory);
typedef int (*FnRender)(P_XFormRender);

#endif // CG_CLIENT_INCLUDE_RENDER_XFORM_RENDER_H

